#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π hostname –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–∞—à–±–æ—Ä–¥–∞—Ö Grafana
"""

import json
import re
import os
from pathlib import Path

def add_hostname_variable(dashboard_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hostname –≤ –¥–∞—à–±–æ—Ä–¥"""
    if 'templating' not in dashboard_data:
        dashboard_data['templating'] = {'list': []}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è hostname
    hostname_exists = any(var.get('name') == 'hostname' for var in dashboard_data['templating']['list'])
    
    if not hostname_exists:
        hostname_variable = {
            "current": {
                "selected": False,
                "text": "All",
                "value": "$__all"
            },
            "datasource": {
                "type": "postgres",
                "uid": "DS_ANALYZER_POSTGRESQL"
            },
            "definition": "SELECT DISTINCT hostname FROM connections ORDER BY hostname",
            "hide": 0,
            "includeAll": True,
            "label": "Hostname",
            "multi": False,
            "name": "hostname",
            "options": [],
            "query": "SELECT DISTINCT hostname FROM connections ORDER BY hostname",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": False,
            "sort": 0,
            "type": "query"
        }
        dashboard_data['templating']['list'].insert(0, hostname_variable)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è hostname")
    else:
        print("‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è hostname —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def update_sql_queries(dashboard_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ SQL –∑–∞–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è—è —Ñ–∏–ª—å—Ç—Ä –ø–æ hostname"""
    updated_count = 0
    
    def process_panel(panel):
        nonlocal updated_count
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º targets –≤ –ø–∞–Ω–µ–ª–∏
        if 'targets' in panel:
            for target in panel['targets']:
                if 'rawSql' in target and 'FROM connections' in target['rawSql']:
                    old_sql = target['rawSql']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ hostname –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if 'hostname IN ($hostname)' not in old_sql and '$hostname' not in old_sql:
                        # –ò—â–µ–º WHERE clause
                        if 'WHERE' in old_sql:
                            # –î–æ–±–∞–≤–ª—è–µ–º AND hostname IN ($hostname)
                            new_sql = old_sql.replace(
                                'WHERE $__timeFilter(time)',
                                'WHERE $__timeFilter(time) AND hostname IN ($hostname)'
                            )
                            # –ï—Å–ª–∏ –Ω–µ—Ç $__timeFilter, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ WHERE
                            if new_sql == old_sql:
                                new_sql = re.sub(
                                    r'WHERE\s+',
                                    'WHERE hostname IN ($hostname) AND ',
                                    old_sql,
                                    count=1
                                )
                        else:
                            # –î–æ–±–∞–≤–ª—è–µ–º WHERE clause
                            new_sql = old_sql.replace(
                                'FROM connections',
                                'FROM connections WHERE hostname IN ($hostname)'
                            )
                        
                        if new_sql != old_sql:
                            target['rawSql'] = new_sql
                            updated_count += 1
                            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –ø–∞–Ω–µ–ª–∏: {panel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
        if 'panels' in panel:
            for sub_panel in panel['panels']:
                process_panel(sub_panel)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    if 'panels' in dashboard_data:
        for panel in dashboard_data['panels']:
            process_panel(panel)
    
    return updated_count

def update_dashboard_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞"""
    print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å dashboard –≤–Ω—É—Ç—Ä–∏
        if 'dashboard' in data:
            dashboard_data = data['dashboard']
        else:
            dashboard_data = data
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hostname
        add_hostname_variable(dashboard_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
        updated_queries = update_sql_queries(dashboard_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {updated_queries}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ hostname")
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞—à–±–æ—Ä–¥–∞–º–∏
    dashboards_dir = Path("grafana/grafana/dashboards")
    
    if not dashboards_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {dashboards_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –¥–∞—à–±–æ—Ä–¥–æ–≤
    dashboard_files = list(dashboards_dir.glob("*.json"))
    
    if not dashboard_files:
        print(f"‚ùå JSON —Ñ–∞–π–ª—ã –¥–∞—à–±–æ—Ä–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {dashboards_dir}")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(dashboard_files)} —Ñ–∞–π–ª–æ–≤ –¥–∞—à–±–æ—Ä–¥–æ–≤")
    
    success_count = 0
    for file_path in dashboard_files:
        if update_dashboard_file(file_path):
            success_count += 1
    
    print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{len(dashboard_files)} —Ñ–∞–π–ª–æ–≤")
    
    if success_count > 0:
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Grafana: docker-compose -f grafana/docker-compose.grafana.yml restart grafana")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –≤ Grafana")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π hostname –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ –≤–≤–µ—Ä—Ö—É –¥–∞—à–±–æ—Ä–¥–∞")

if __name__ == "__main__":
    main() 